base.color <- dmat.color(base.r)
base.order <- order.single(base.r)
cpairs(base, base.order, panel.colors = base.color, gap = .5,
main = "Variables Ordered and Colored by Correlation")
library(gclus)
library(rgl)
install.packages("gclus")
library(gclus)
cor.m <- abs(cor(mtcars))
cor.col <- dmat.color(cor.m)
cor.order <- order.single(cor.m)
cpairs(cor.m, cor.order, panel.colors = cor.col, gap = .5,
main = "Variables Ordered and Colored by Correlation")
ggpairs(mtcars[,c(1:4)])
attach(mtcars)
library(gclus) # cpairs stuff
cor.m <- abs(cor(mtcars))
cor.col <- dmat.color(cor.m)
cor.order <- order.single(cor.m)
cpairs(cor.m, cor.order, panel.colors = cor.col, gap = .5, main = "Variables Ordered and Colored by Correlation")
?mtcars
cor.matrix <- round(cor(mtcars[,c(1,4)]),2)
round(cor(mtcars[,c(1,4)]),2)
round(cor(mtcars[,c(1:4)]),2)
library(ggplot2)
library(GGally)
ggpairs(mtcars[,c(1:4)])
pairs(~mpg+cyl+wt+disp+hp+drat, data=mtcars, text.panel=NULL, upper.panel=NULL)
library(reshape2)
?melt
cor.matrix <- round(cor(mtcars),2)
cor.matrix <- abs(cor.matrix)
View(cor.matrix)
cor.df <-melt(cor(cor.matrix))
View(cor.df)
cor.df <-melt(cor.matrix)
View(cor.df)
qplot(x=Var1, y=Var2, data=cor.df, fill=value, geom="tile") +  geom_text(aes(Var1, Var2, label = round(value,2)), color = "#073642", size = 3)
View(cor.df)
qplot(x=Var1, y=Var2, data=cor.df, fill=value, geom="tile") +  geom_text(aes(Var1, Var2, label = round(value,2)), color = "#ff0000", size = 3)
cor.m <- abs(cor(mtcars))
cor.col <- dmat.color(cor.m)
cor.order <- order.single(cor.m)
cpairs(cor.m, cor.order, panel.colors = cor.col, gap = .5, main = "Correlation of mtcars")
library(texreg)
installed.packages
installed.packages()
library(stargazer)
library(gclus) # cpairs stuff
round(cor(mtcars),2)
?mtcars
?cor.test
cor.test(mpg, wt)
mpg
cor.test(mtcars$mpg, mtcars$wt)
round(cor(mtcars),2)
ggpairs(mtcars[,c(1:4)])
?mtcars
cor.m <- abs(cor(mtcars))
cor.col <- dmat.color(cor.m)
cor.order <- order.single(cor.m)
cpairs(cor.m, cor.order, panel.colors = cor.col, gap = .5, main = "Correlations mtcars")
ggpairs(mtcars[,c(1:4)])
ggplot(mtcars, aes(x=mpg)) + geom_histogram(alpha=.9, fill="darkred")
ggplot(mtcars, aes(x=mpg)) + geom_histogram(alpha=.9, fill="darkred", binwidth=5)
ggplot(mtcars, aes(x=mpg)) + geom_histogram(alpha=.9, fill="darkred", binwidth=4)
ggplot(mtcars, aes(x=mpg)) + geom_histogram(alpha=.9, fill="darkred", binwidth=10)
ggplot(mtcars, aes(x=mpg)) + geom_histogram(alpha=.9, fill="darkred", binwidth=20)
ggplot(mtcars, aes(x=mpg)) + geom_histogram(alpha=.9, fill="darkred", binwidth=2)
ggplot(mtcars, aes(x=mpg)) + geom_histogram(alpha=.9, fill="darkred", binwidth=5)
ggplot(mtcars, aes(x=mpg)) + geom_histogram(alpha=.9, fill="darkred", binwidth=1)
ggplot(mtcars, aes(x=mpg)) + geom_histogram(alpha=.9, fill="darkred", binwidth=2)
ggplot(mtcars, aes(x=mpg)) + geom_histogram(alpha=.9, fill="darkred", binwidth=3)
?step
?mtcars
m1 <- lm(mpg ~ cyl)
attach(mtcars)
m1 <- lm(mpg ~ cyl, data=mtcars)
step(m1, direction="forward")
m1 <- lm(mpg ~ ., data=mtcars)
step(m1, direction="forward")
m1 <- lm(mpg ~ cyl, data=mtcars)
summary(m1)
m2 = update(m1, .~.+disp)
summary(m2)
anova(m1, m2)
m2 = update(m1, .~.+hp)
summary(m2)
m2 = update(m1, .~.+drat)
summary(m2)
m2 = update(m1, .~.+wt)
summary(m2)
anova(m1, m2)
pairs(mtcars, main="bla")
coplot(mpg~disp | as.factor(cyl), data=mtcars, panel=panel.smooth, rows=1)
?coplot
confint(m2)
?C
am.code <- C(mtcars$am, treatment)
str(mtcars$am)
as.factor(mtcars$am)
am.code <- C(as.factor(mtcars$am), treatment)
m3 <- update(m2, .~. + am.code)
summary(m3)
summary(m2)
m3 <- update(m2, .~. + am)
summary(m3)
m3 <- update(m2, .~. + drat)
summary(m3)
m3 <- update(m2, .~. + vs)
summary(m3)
m3 <- update(m2, .~. + gear)
summary(m3)
m3 <- update(m2, .~. + carb)
summary(m3)
m3 <- update(m2, .~. + hp)
summary(m3)
m3 <- update(m2, .~. + disp)
summary(m3)
m3 <- update(m2, .~. + drat)
summary(m3)
m3 <- update(m2, .~. + am)
summary(m3)
m4 <- lm(mpg~am, data=mtcars)
summary(m4)
m5 <- update(m4, .~.+cyl)
summary(m5)
m5 <- update(m4, .~.+wt)
summary(m5)
m5 <- update(m4, .~.+hp)
summary(m5)
summary(m2)
m4 <- lm(mpg~am, data=mtcars)
m5 <- update(m4, .~.+hp)
anova(m4, m5)
summary(m1)
m2 <- update(m1, .~.+wt)
summary(m2)
m2 <- update(m1, .~.+wt+hp)
summary(m2)
m2 <- update(m1, .~.+wt+hp+disp)
summary(m2)
m2 <- update(m1, .~.+wt+hp+drat)
summary(m2)
m2 <- update(m1, .~.+wt+hp+qsec)
summary(m2)
m2 <- update(m1, .~.+wt+hp+vs)
summary(m2)
m2 <- update(m1, .~.+wt+hp+am)
summary(m2)
m2 <- update(m1, .~.+wt+hp+gear)
summary(m2)
m2 <- update(m1, .~.+wt+hp+carb)
summary(m2)
m6 <- lm(mpg ~ ., data=mtcars)
summary(m6)
m7 <- update(m6, .~. -gear)
summary(m7)
m8 <- update(m7, .~. -carb)
summary(m8)
m9 <- update(m8, .~. -vs)
summary(m9)
m2 <- update(m1, .~.+wt+hp+carb)
summary(m2)
m2 <- update(m1, .~.+wt+hp)
summary(m2)
par(mfrow=c(2,2))
plot(m2)
install.packages("texreg")
library(GGally)
library(gclus)
library(texreg)
install.packages("lsr")
?texreg
fit <- lm(mpg ~ as.factor(cyl) + wt, data=mtcars)
summary(fit)
fitU <- lm(mpg ~ as.factor(cyl), data=mtcars)
fitA <- lm(mpg ~ as.factor(cyl) + wt, data=mtcars)
library(texreg)
fitU <- lm(mpg ~ as.factor(cyl), data=mtcars)
fitA <- lm(mpg ~ as.factor(cyl) + wt, data=mtcars)
screenreg(fitU, fitA)
install.packages("stargazer")
library(stargazer)
stargazer(fitU, fitA, type="text")
fit4 <- lm(mpg ~ as.factor(cyl) + wt)
fit5 <- lm(mpg ~ as.factor(cyl) * wt, data=mtcars)
anova(fit4, fit5)
fit4 <- lm(mpg ~ as.factor(cyl) + wt, data=mtcars)
anova(fit4, fit5)
stargazer(fit4,fit5)
stargazer(fit4,fit5, type="text")
?mtcars
mtcars$wt
mtcars$wt/1000
stem(mpg)
stem(mtcars$mpg)
fit8 <- lm(y~x)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit8 <- lm(y~x)
influence(fit8)
hat(fit8)
hat(x)
hatvalues(fit8)
dfbetas(fit8)
install.packages("twitteR")
install.packages("streamR")
install.packages("Rfacebook")
install.packages("ROAuth")
install.packages("tm")
install.packages("sjPlot")
library(AppliedPredictiveModeling)
data(segmentationOriginal)
sg <- segmentationOriginal
library(caret)
training <- sg[sg$Case=="Train",]
testing <- sg[sg$Case=="Test",]
set.seed(125)
model1 <- train(Class ~ ., data=training, method="rpart")
plot(model1$finalModel, uniform=T)
text(model1$finalModel, all=T, use.n=T)
model1$finalModel
library(pgmm)
install.packages("pgmm")
library(pgmm)
data(olive)
str(olive)
table(olive$Region)
olive = olive[,-1]
table(olive$Area)
?olive
train <- train(Area ~ ., method="rpart", data=olive)
newdata <- as.data.frame(t(colMeans(olive)))
modelFit <- train(Area ~ ., method="rpart", data=olive)
nd <- as.data.frame(t(colMeans(olive)))
predict(modelFit, newdata=nd)
modelFit <- train(Area ~ ., method="rpart", data=olive)
library(caret)
modelFit <- train(Area ~ ., method="rpart", data=olive)
modelFit <- train(Area ~ ., method="rpart", data=olive)
nd <- as.data.frame(t(colMeans(olive)))
predict(modelFit, newdata=nd)
library(ElemStatLearn)
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
str(SAheart)
?SAheart
modelFitSA <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, method="glm", family="binomial", data=trainSA)
missClass = function(values,prediction){
sum(((prediction > 0.5)*1) != values)/length(values)
}
modelFitSA
pt <- predict(modelFitSA, newdata=trainSA)
print(pt)
missClass(train$chd, pt)
missClass(SAheart$chd, pt)
ptest <- predict(modelFitSA, newdata=testSA)
missClass(trainSA$chd, pt)
ptest <- predict(modelFitSA, newdata=testSA)
missClass(testSA$chd, ptest)
ptrain <- predict(modelFitSA, newdata=trainSA)
missClass(trainSA$chd, pt)
ptest <- predict(modelFitSA, newdata=testSA)
missClass(testSA$chd, ptest)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
str(vowel.train)
vowel.train$y <- as.factor(vowel.train$y)
str(vowel.train)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
modelFit <- train(y ~ ., method="rf", prox=T)
modelFit <- train(y ~ ., method="rf", prox=T, data=vowel.train)
install.packages("randomForest")
modelFit <- train(y ~ ., method="rf", prox=T, data=vowel.train)
?varlmp
??varlmp
varImp(modelFit)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
str(vowel.train)
str(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
str(vowel.train)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
library(caret)
??gm
??gbm
set.seed(33833)
rfmodel <- train(y ~ ., data=vowel.train, method="rf")
gbmodel <- train(y~ ., data=vowel.train, method="gbm")
?predict
prf <- predict(rfmodel, newdata=vowel.test)
prf
print(prf)
summary(prf)
missClass(prf)
confusionMatrix(prf, vowel.test$y)
prgbm <- predict(gbmodel, newdata=vowel.test)
confusionMatrix(prgbm, vowel.test$y)
set.seed(33833)
rfmodel <- train(y~ ., data=vowel.train, method="rf")
gbmodel <- train(y~ ., data=vowel.train, method="gbm")
prf <- predict(rfmodel, newdata=vowel.test)
confusionMatrix(prf, vowel.test$y)
prgbm <- predict(gbmodel, newdata=vowel.test)
confusionMatrix(prgbm, vowel.test$y)
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
rfmod <- train(diagnosis ~., data=training, method="rf")
library(doMC)
registerDoMC(3)
set.seed(62433)
rfmod <- train(diagnosis ~., data=training, method="rf")
gbmod <- train(diagnosis ~., data=training, method="gbm")
ldamod<- train(diagnosis ~., data=training, method="lda")
confusionMatri(rfmod)
confusionMatrix(rfmod)
pr_rf <- predict(rfmod, newdata=testing)
pr_gbm<- predict(gbmod, newdata=testing)
pr_lda<- predict(ldamod, newdata=testing)
confusionMatrix(pr_rf)
confusionMatrix(pr_rf, testing$diagnosis)
confusionMatrix(pr_gbm, testing$diagnosis)
confusionMatrix(pr_lda, testing$diagnosis)
set.seed(33833)
rfmodel <- train(y~ ., data=vowel.train, method="rf")
set.seed(33833)
gbmodel <- train(y~ ., data=vowel.train, method="gbm")
prf <- predict(rfmodel, newdata=vowel.test)
confusionMatrix(prf, vowel.test$y)
prgbm <- predict(gbmodel, newdata=vowel.test)
confusionMatrix(prgbm, vowel.test$y)
set.seed(62433)
rfmod <- train(diagnosis ~., data=training, method="rf")
set.seed(62433)
gbmod <- train(diagnosis ~., data=training, method="gbm")
set.seed(62433)
ldamod<- train(diagnosis ~., data=training, method="lda")
pr_rf <- predict(rfmod, newdata=testing)
pr_gbm<- predict(gbmod, newdata=testing)
pr_lda<- predict(ldamod, newdata=testing)
confusionMatrix(pr_rf, testing$diagnosis)
confusionMatrix(pr_gbm, testing$diagnosis)
confusionMatrix(pr_lda, testing$diagnosis)
predDF <- data.frame(pr_rf, pr_gbm, pr_lda, diagnosis=testing$diagnosis)
combinedMod = train(diagnosis ~ ., data=predDF, method="gam")
combinedMod <- train(diagnosis ~ ., data=predDF, method="gam")
combinedPre <- predict(combinedMod, newdata=predDF)
confusionMatrix(combinedPre)
confusionMatrix(combinedPre, testing$diagnosis)
combinedPre <- predict(combinedMod, newdata=testing)
confusionMatrix(combinedPre, testing$diagnosis)
pred1 <- predict(pr_rf, newdata=testing)
pred1 <- predict(rfmod, newdata=testing)
pred2 <- predict(gbmod, newdata=testing)
pred3 <- predict(ldamod, newdata=testing)
predV <- data.frame(pred1, pred2, pred3)
combp <- predict(combinedMod, predV)
confusionMatrix(combinedPre, testing$diagnosis)
rm(list=ls())
library(ElemStatLearn)
library(caret)
data(vowel.train)
data(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
rfmodel <- train(y~ ., data=vowel.train, method="rf")
gbmodel <- train(y~ ., data=vowel.train, method="gbm")
p1 <- predict(rfmodel, newdata=vowel.test)
p2 <- predict(gbmodel, newdata=vowel.test)
confusionMatrix(p1, vowel.test$y)
confusionMatrix(p2, vowel.test$y)
dfcombo <- data.frame(p1, p2, y = vowel.test$y)
fit_combined <- train(y ~ ., data = dfcombo, method = "gam")
p3 <- predict(fit_combined, newdata = vowel.test)
c1 <- confusionMatrix(p1, vowel.test$y)
c3 <- confusionMatrix(p3, dfcombo$y)
c3
dfcombo <- data.frame(p1, p2, y = vowel.test$y)
fit_combined <- train(y ~ ., data = dfcombo, method = "gam")
set.seed(33833)
rfmodel <- train(y~ ., data=vowel.train, method="rf")
gbmodel <- train(y~ ., data=vowel.train, method="gbm")
p1 <- predict(rfmodel, newdata=vowel.test)
p2 <- predict(gbmodel, newdata=vowel.test)
p1$overall['Accuracy]
p1$overall['Accuracy']
p1$overall['Accuracy']
c1 <- confusionMatrix(p1, vowel.test$y)
c1$overall['Accuracy']
dfcombo <- data.frame(p1, p2, y = vowel.test$y)
fit_combined <- train(y ~ ., data = dfcombo, method = "gam")
fit_combined <- train(y ~ ., data = dfcombo)
p3 <- predict(fit_combined, newdata = vowel.test)
c2 <- confusionMatrix(p2, vowel.test$y)
c3 <- confusionMatrix(p3, vowel.test$y)
c2$overall['Accuracy']
c3$overall['Accuracy']
c1$overall['Accuracy']
c2$overall['Accuracy']
c3$overall['Accuracy']
shiny::runApp('Dropbox/stats/tmp/ppshiny')
install.packages("shinythemes")
shiny::runApp('Dropbox/stats/tmp/ppshiny')
library(shinythemes)
shiny::runApp('Dropbox/stats/tmp/ppshiny')
shiny::runApp('Dropbox/stats/tmp/ppshiny')
shiny::runApp('Dropbox/stats/tmp/ppshiny')
shiny::runApp('Dropbox/stats/tmp/ppshiny')
shiny::runApp('Dropbox/stats/tmp/ppshiny')
shiny::runApp('Dropbox/stats/tmp/ppshiny')
shiny::runApp('Dropbox/stats/tmp/ppshiny')
setwd("~/Dropbox/stats/tmp/")
load("SciTechRD_4JUN2015.RData")
levels(dfr$Indicator)
shiny::runApp('ppshiny')
shiny::runApp('ppshiny')
clear
clear()
shiny::runApp('ppshiny')
leves(dfr$Indicator)
levels(dfr$Indicator)
shiny::runApp('ppshiny')
dfr <- read.csv("ppshiny/UNESCO_SciTechRD_Personnel2.csv", sep=",", header=T)
View(dfr)
levels(dfr$Country)
dfr[which(dfr$Country=="United Kingdom of Great Britain and Northern Ireland"),]$Country <- "UK"
dfr[which(dfr$Country=="United Kingdom of Great Britain and Northern Ireland")]$Country <- level("UK")
levels(dfr$Country)[levels(dfr$Country)=="United Kingdom of Great Britain and Northern Ireland"] <- "UK"
levels(dfr$Country)
dfr <- read.csv("ppshiny/UNESCO_SciTechRD_Personnel2.csv", sep=",", header=T)
dfr$ValueFlags <- as.numeric(as.character(dfr$ValueFlags))
levels(dfr$Country)[levels(dfr$Country)=="United Kingdom of Great Britain and Northern Ireland"] <- "United Kingdom"
levels(dfr$Country)[levels(dfr$Country)=="China, Hong Kong Special Administrative Region"] <- "China, Hong Kong"
levels(dfr$Country)[levels(dfr$Country)=="China, Macao Special Administrative Region"] <- "China, Macao"
levels(dfr$Country)[levels(dfr$Country)=="The former Yugoslav Republic of Macedonia"] <- "Macedonia"
dfr$EUII <- NA
dfi <- read.csv("ppshiny/EUInnovationIndex.csv", sep="\t", header=T)
for (i in 1:nrow(dfr)){
country <- as.character(dfr[i,2])
time <- paste0("InnoIndex",dfr[i,3], sep="")
EEII <- dfi[which(dfi$Country==country),time]
dfr[i,5] <- ifelse(is.null(EEII), NA, EEII)
}
save(dfr, file="SciTechRD_20JUN2015.RData")
shiny::runApp('ppshiny')
load("SciTechRD_20JUN2015.RData")
levels(dfr$Indicator)
rm(list=ls())
dfr <- read.csv("ppshiny/UNESCO_SciTechRD_Personnel2.csv", sep=",", header=T)
dfr$ValueFlags <- as.numeric(as.character(dfr$ValueFlags))
levels(dfr$Country)[levels(dfr$Country)=="United Kingdom of Great Britain and Northern Ireland"] <- "United Kingdom"
levels(dfr$Country)[levels(dfr$Country)=="China, Hong Kong Special Administrative Region"] <- "China, Hong Kong"
levels(dfr$Country)[levels(dfr$Country)=="China, Macao Special Administrative Region"] <- "China, Macao"
levels(dfr$Country)[levels(dfr$Country)=="The former Yugoslav Republic of Macedonia"] <- "Macedonia"
#rename some indicators
levels(dfr$Indicator)[levels(dfr$Indicator)=="Total R&D personnel (HC) - Total"] <- "Total R&D personnel (HC) x Innovation Score"
levels(dfr$Indicator)[levels(dfr$Indicator)=="Total R&D personnel (FTE) - Total"] <- "Total R&D personnel (FTE) x Innovation Score"
levels(dfr$Indicator)[levels(dfr$Indicator)=="Total R&D personnel (FTE) - Female"] <- "Female R&D personnel (FTE) x Innovation Score"
levels(dfr$Indicator)[levels(dfr$Indicator)=="Total R&D personnel (FTE) - % Female"] <- "% Female R&D personnel (FTE) - x Innovation Score"
dfr$EUII <- NA
dfi <- read.csv("ppshiny/EUInnovationIndex.csv", sep="\t", header=T)
#add the innovation data to the science & tech personal file
for (i in 1:nrow(dfr)){
country <- as.character(dfr[i,2])
time <- paste0("InnoIndex",dfr[i,3], sep="")
EEII <- dfi[which(dfi$Country==country),time]
dfr[i,5] <- ifelse(is.null(EEII), NA, EEII)
}
save(dfr, file="SciTechRD_20JUN2015.RData")
shiny::runApp('ppshiny')
shiny::runApp('ppshiny')
levels(dfr$Indicator)
shiny::runApp('ppshiny')
shinyapps::setAccountInfo(name='jmueller17', token='8CD8659ADBC55F1E3305362D3E379C0C', secret='6FLe75odEh39R6NMyaTvZUPGpLdM8fksW+hrixc5')
shinyapps::setAccountInfo(name='jmueller17', token='8CD8659ADBC55F1E3305362D3E379C0C', secret='6FLe75odEh39R6NMyaTvZUPGpLdM8fksW+hrixc5')
install.packages("shiny")
shinyapps::setAccountInfo(name='jmueller17', token='8CD8659ADBC55F1E3305362D3E379C0C', secret='6FLe75odEh39R6NMyaTvZUPGpLdM8fksW+hrixc5')
library("shinyapps", lib.loc="~/R/x86_64-redhat-linux-gnu-library/3.1")
install.packages("shinyapps")
install.packages("shinyapps")
shinyapps::setAccountInfo(name='jmueller17', token='8CD8659ADBC55F1E3305362D3E379C0C', secret='6FLe75odEh39R6NMyaTvZUPGpLdM8fksW+hrixc5')
devtools::install_github('rstudio/shinyapps')
install.package(PKI)
install.packages(PKI)
install.packages("PKI")
install.packages("PKI")
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='jmueller17', token='8CD8659ADBC55F1E3305362D3E379C0C', secret='6FLe75odEh39R6NMyaTvZUPGpLdM8fksW+hrixc5')
#setwd("/mnt/DATA/work/stats/moocstuff/CourseraDataSciSpecial/datasciencecoursera/C9-DataProducts/ppshiny")
setwd("/mnt/DATA/work/stats/moocstuff/CourseraDataSciSpecial/datasciencecoursera/C9-DataProducts/ppshiny")
shiny::runApp()
shinyapps::setAccountInfo(name='jmueller17', token='8CD8659ADBC55F1E3305362D3E379C0C', secret='6FLe75odEh39R6NMyaTvZUPGpLdM8fksW+hrixc5')
